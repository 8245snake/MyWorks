@namespace MyWorkDashboard.Shared
@using System.Timers
@using System.Diagnostics

@implements IAsyncDisposable

@if (_isGrabbing)
{
    <div class="drag-target" @onmouseup="OnMouseUp" @onmousemove="OnMouseMove" @onmouseout="OnMouseOut" >
    </div>
}

<div class="@($"{_design} {Class}")" style=@($"top: {Y}px; left: {X}px; {Style}") 
     @onclick="OnClick"
     @onmousedown="OnMouseDownHandler" 
     @onmouseup="OnMouseUp">
    @ChildContent
</div>

@if (_isGrabbing)
{
    <div class="drag-target" @onmouseup="OnMouseUp" @onmousemove="OnMouseMove" @onmouseout="OnMouseOut" >
    </div>
}


<style>
    .draggable-panel {
        cursor: grab;
        position: absolute;
    }

    .panel-grabbing {
        cursor: grabbing;
        z-index: 999;
    }

    .drag-target {
        position: fixed;
        left: 0px;
        top: 0px;
        height: 100vh;
        width: 100vw;
        z-index: 1000;
        cursor: grabbing;
        @(GrayBack())
    }


</style>


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> BeginDrag { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Drop { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseDown { get; set; }


    [Parameter]
    public EventCallback<MouseEventArgs> Moved { get; set; }

    [Parameter]
    public double X
    {
        get => _x;
        set
        {
            if (_x != value)
            {
                _x = value;
                XChanged.InvokeAsync(_x);
            }
        }
    }
    private double _x;

    [Parameter]
    public EventCallback<double> XChanged { get; set; }

    [Parameter]
    public double Y
    {
        get => _y;
        set
        {
            if (_y != value)
            {
                _y = value;
                YChanged.InvokeAsync(_y);
            }
        }
    }
    private double _y;

    [Parameter]
    public EventCallback<double> YChanged { get; set; }


    [Parameter]
    public bool FixX { get; set; }

    [Parameter]
    public bool FixY { get; set; }

    [Parameter]
    public int GrabbingDelay { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? Class { get; set; }

    Timer _timer;

    bool _isGrabbing = false;
    string _design
    {
        get
        {
            string design = "draggable-panel";
            if (_isGrabbing)
            {
                design += " panel-grabbing panel-grabbing-color";
            }
            return design;
        }
    }

    protected override void OnInitialized()
    {
        if (GrabbingDelay > 0)
        {
            _timer = new Timer(GrabbingDelay) { AutoReset = false };
            _timer.Elapsed += TimerOnElapsed;
        }
    }
    private double deltaX;
    private double deltaY;
    private double lastX;
    private double lastY;

    private bool isTimerWaiting = false;


    private async Task OnMouseDownHandler(MouseEventArgs e)
    {
        await OnMouseDown.InvokeAsync(e);

        if (GrabbingDelay > 0)
        {
            _timer.Start();
            isTimerWaiting = true;
            _isGrabbing = false;
        }
        else
        {
            _isGrabbing = true;
            deltaX = 0;
            deltaY = 0;
            await BeginDrag.InvokeAsync(e);
        }

        lastX = e.ScreenX;
        lastY = e.ScreenY;

    }

    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        if (isTimerWaiting)
        {
            _timer.Stop();
            _isGrabbing = true;
            isTimerWaiting = false;
            deltaX = 0;
            deltaY = 0;
            await InvokeAsync(StateHasChanged);
            await BeginDrag.InvokeAsync(null);
        }

    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (GrabbingDelay > 0)
        {
            _timer.Stop();
        }
        
        isTimerWaiting = false;
        _isGrabbing = false;

        if (Math.Abs(deltaX) > 0 || Math.Abs(deltaY) > 0)
        {
            // 移動していたらDropを発火する
            await Drop.InvokeAsync(e);
        }

        deltaX = 0;
        deltaY = 0;
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (!_isGrabbing) return;

        if (!FixX)
        {
            var delta = e.ScreenX - lastX;
            deltaX += delta;
            X += delta;
            lastX = e.ScreenX;
        }

        if (!FixY)
        {
            var delta = e.ScreenY - lastY;
            deltaY += delta;
            Y += delta;
            lastY = e.ScreenY;
        }

        await Moved.InvokeAsync(e);
    }

    public ValueTask DisposeAsync()
    {
        _timer.Stop();
        _timer.Elapsed -= TimerOnElapsed;
        _timer.Dispose();
        return ValueTask.CompletedTask;
    }

    private void OnMouseOut()
    {
        isTimerWaiting = false;
    }


    private string GrayBack()
    {
#if dummy
        return "background-color: gray; opacity: 0.1;";
#endif
        return "";
    }
}
