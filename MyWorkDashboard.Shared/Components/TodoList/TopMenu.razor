@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services

@inject SchedulingServive schedulingServive
@inject PageNavigatingService navigatingService


<AntDesign.Menu Theme="MenuTheme.Dark" Mode="MenuMode.Horizontal">
    <AntDesign.Row Justify="space-between">
        <AntDesign.Col>
            @if (navigatingService.CurrentPage == PageType.Home)
            {
                <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Left" Shape="@ButtonShape.Circle" OnClick="GoYesterday"></Button>
                <DatePicker @ref="_datePicker" AllowClear="false" Size="@DatePickerSize.Large" TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="_dateTime" OnChange="OnDateChanged"/>
                <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Right" Shape="@ButtonShape.Circle" OnClick="GoTommorrow"></Button>

                <Tooltip Placement="@Placement.Bottom" Title=@("新規タスク追加")>
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Form" Shape="@ButtonShape.Round" OnClick="AddNewSchedule" Style="margin-left: 10px"></Button>
                </Tooltip>
            }
            else
            {
                <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Left" Shape="@ButtonShape.Round" OnClick="GoHome">Home</Button>
            }

        </AntDesign.Col>

        <AntDesign.Col>
            @*ここにメニューボタンとかを出す*@
            <Row Justify="space-around" Gutter="16">
                
                <Col>
                    @if (navigatingService.CurrentPage == PageType.Preference)
                    {
                        <div class="top-navbar" style="background-color: #87cefa; color: black;">プリファレンス</div>
                    }
                    else
                    {
                        <div class="top-navbar" @onclick="GoPreference">プリファレンス</div>
                    }

                </Col>

                <Col><Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Bulb" OnClick="() => { LightModeChanged.InvokeAsync(this);}"></Button></Col>

            </Row>
        </AntDesign.Col>
    </AntDesign.Row>
</AntDesign.Menu>

<style>
    .top-navbar {
        height: 100%;
        width: 100px;
        cursor: pointer;
    }
</style>

@code {
    private DateTime? _dateTime;
    private DatePicker<DateTime?> _datePicker;

    [Parameter]
    public EventCallback LightModeChanged { get; set; }

    protected override async void OnInitialized()
    {
        _dateTime = DateTime.Now;
        var today = DateOnly.FromDateTime(DateTime.Now);
        await schedulingServive.ChangeSelectedDateAsync(today, this);

        navigatingService.Navigated += OnNavigated;
    }

    private void OnNavigated(object? sender, EventArgs e)
    {
        if(sender == this) return;

    }

    private  async Task GoYesterday()
    {
        await ChangeDate(_dateTime.Value.AddDays(-1));
    }

    private  async Task GoTommorrow()
    {
        await ChangeDate(_dateTime.Value.AddDays(1));
    }

    private async Task AddNewSchedule()
    {
        var duty = await schedulingServive.AddNewScheduleAsync(DateOnly.FromDateTime(_dateTime.Value));
        await schedulingServive.ChangeSelectedDutyAsync(duty, this);
    }


    private async Task OnDateChanged(DateTimeChangedEventArgs e)
    {
        await ChangeDate(e.Date);
    }

    private async Task ChangeDate(DateTime datetime)
    {
        _dateTime = datetime;
        await schedulingServive.ChangeSelectedDateAsync(DateOnly.FromDateTime(datetime), this);
        await schedulingServive.ChangeSelectedDutyAsync(null, this);
        StateHasChanged();
    }

    private void GoPreference()
    {
        navigatingService.Navigate(PageType.Preference, this);
    }

    private void GoHome()
    {
        navigatingService.Navigate(PageType.Home, this);
    }

}
