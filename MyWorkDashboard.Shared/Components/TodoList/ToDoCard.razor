@namespace MyWorkDashboard.Shared

@using System.ComponentModel.DataAnnotations
@using MyWorkDashboard.Shared.Services

@implements IDisposable
@inject SchedulingServive schedulingServive

<Card Hoverable="true" Style="padding: 2px" BodyStyle="padding: 2px">
    <Body>
    <Row Align="middle">
        <Col>
            <Tag Color="@_colorCode" Class="number-tag">
                @if (@Model?.Todo?.Detail?.Priority == null)
                {
                    @("?")
                }
                else
                {
                    @Model.Todo.Detail.Priority
                }
            </Tag>
        </Col>
        <Col Flex=@("auto")>
            <AntDesign.Input @ref="_textBox" TValue="string" @bind-value="_description" Style="@($"display: {_textDisplayStyle};")" OnPressEnter="OnPressEnter" OnBlur="OnBlur"/>
            <div @onclick="OnClick" class="todo-text" style="@($"display : {_paragraphDisplayStyle}; width: 100%; ")">
                <p class="todo-text" style="@($"display : table-cell; width: 100%; ")">@_description</p>
            </div>
        </Col>
        <Col>
            <DropdownButton OnClick='OnDetailClick' Trigger="new Trigger[] { Trigger.Click }">
                <Overlay>
                    <Menu SelectedKeys="@(new string[]{})">
                        <MenuItem OnClick="CreateTask">
                            タスクを作成
                        </MenuItem>
                        <MenuItem OnClick="SendTomorrow">
                            翌日に送る
                        </MenuItem>
                        <MenuItem>
                            <Popconfirm Placement="@Placement.Bottom" Title="削除してよろしいですか" OkText="削除する" CancelText="キャンセル" OnConfirm="DeleteTask">
                                <Button Danger Block>削除</Button>
                            </Popconfirm>
                        </MenuItem>

                    </Menu>
                </Overlay>
                <ChildContent>
                    詳細
                </ChildContent>
            </DropdownButton>
        </Col>
    </Row>
        
    </Body>
</Card>

<ToDoDetailDialog @ref="_dialog"/>

<style>
    .todo-text {
        height: 100%;
        min-height: 20px;
        display: table-cell;
        vertical-align: middle;
    }

    .number-tag {
        color: white;
        background-color: white;
        -webkit-text-stroke: 0.5px black;
        font-size: large;
        font-weight: bold;
    }
</style>

@code {

    [Parameter, Required]
    public ToDoItemVm Model { get; set; }

    [Parameter]
    public EventCallback StateChanged { get; set; }

    AntDesign.Input<string> _textBox;

    ToDoDetailDialog _dialog;

    private string _description
    {
        get => this.Model.Todo.Description;
        set => this.Model.Todo.Description = value;
    }

    private bool _isEditting = false;
    private string _textDisplayStyle => _isEditting ? "table-cell" : "none";
    private string _paragraphDisplayStyle => _isEditting ? "none" : "block";

    private string _colorCode
    {
        get
        {
            var workCodeFamilyId = Model?.Todo?.Detail?.WorkCodeFamilyId;
            if (!string.IsNullOrWhiteSpace(workCodeFamilyId))
            {
                return schedulingServive.GetWorkCodeFamilyColorCode(workCodeFamilyId);
            }
            return "#fff";
        }
    }

    // クリックするたびにキャレットが移動するのを防ぐためのフラグ
    private bool _focusHold = false;

    protected override void OnInitialized()
    {
        _isEditting = Model.IsEditing;
    }


    private void OnClick()
    {
        _isEditting = true; // 編集可能にする
        _focusHold = false; // キャレット移動可能にする
    }

    private void OnPressEnter()
    {
        if (_textBox != null)
        {
            _textBox.Blur();
        }
    }

    private async Task OnBlur()
    {
        _isEditting = false;
        await Model.Update();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_textBox != null && !_focusHold)
        {
            // フォーカスを当てて、キャレットを末尾に移動する
            _textBox.Focus();
            _focusHold = true;
        }
    }

    private async Task CreateTask()
    {
        await Model.CreateTask();
        await StateChanged.InvokeAsync(this);
    }

    private async Task SendTomorrow()
    {
        await Model.SendTomorrow();
        await StateChanged.InvokeAsync(this);
    }

    private async Task DeleteTask()
    {
        await Model.DeleteTask();
    }

    private void OnDetailClick()
    {
        _dialog.ShowModal(Model.Todo);
    }

    public void Dispose()
    {
        Model = null;
        _textBox = null;
    }

}
