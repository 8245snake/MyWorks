@using MyWorkDashboard.Shared.Services
@using System.ComponentModel

@inject SchedulingServive schedulingServive

<div style="height: 100%; width: 100%;" @oncontextmenu:stopPropagation @oncontextmenu:preventDefault>
@*    <Row Style="height: 5%;">
        <Col>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Left" Shape="@ButtonShape.Circle" OnClick="GoYesterday"></Button>
            <DatePicker AllowClear="false" Size="@DatePickerSize.Large" TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="_dateTime" OnChange="OnDateChanged"/>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Right" Shape="@ButtonShape.Circle" OnClick="GoTommorrow"></Button>
        </Col>
        <Col Offset="1">
            <Tooltip Placement="@Placement.Bottom" Title=@("新規タスク追加")>
                <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Form" Shape="@ButtonShape.Round" OnClick="AddNewSchedule"></Button>
            </Tooltip>
        </Col>
    </Row>
*@
    <Row Style="height: 100%;">
        <div class="schedule-area">
            
            @foreach (TimeRow row in _rows.Rows)
            {
                <div class="time-row" style="@($"top:{row.RowTopPosition}px;")" @onclick="@row.OnClick">
                    <div class="time-row-item time-label">
                        @(row.Time.ToString())
                    </div>
                    <div class="time-row-item time-border" >
                    </div>
                </div>
            }
            
            @foreach (DutyBar bar in _duties.Bars)
            {
                <Popover Placement="@Placement.Right" TitleTemplate="@GetBarPopupTitle(bar)" ContentTemplate="@GetBarPopupContent(bar)" Trigger="@(new[] {AntDesign.Trigger.Hover})">
                    <div class="time-bar @bar.AdditionalClass" style="@bar.BarStyle" @onclick="bar.OnClick" >
                        <p class="bar-text">@(bar.Duty.StartTime)～@(bar.Duty.EndTime)  @bar.Duty.Title</p>
                    </div>
                </Popover>
            }

        </div>
    </Row>

</div>

@code
{


    private RenderFragment GetBarPopupTitle(DutyBar bar) => @<p>@bar.Duty.Title</p>;

    
    private RenderFragment GetBarPopupContent(DutyBar bar) =>
        @<div>
            @foreach (var line in bar.Duty.Description.Split('\n'))
            {
                @line<br/>
            }
        </div>;

}

<style>
    .schedule-area {
        position: relative;
        background-color: white;
        width: 100%;
        overflow-y: scroll;
    }

    .time-row {
        height: @(TimeRowCollection.RowHeight)px;
        width: 100%;
        position: absolute;
        overflow: hidden;
    }

    .time-row-item {
        float: left;
    }

    .time-label {
        width: @(DutyBar.TimeWidth)px;
    }

    .time-border {
        width: calc(100% - @(DutyBar.TimeWidth)px);
        height: 100%;
        border: 1px #e9e9e9 solid;
    }

    .time-border:hover {
        background-color: ivory;
    }

    .time-bar {
        width: calc(95% - @(DutyBar.TimeWidth)px);
        position: absolute;
        opacity: 0.5;
        border: 0.5px black solid;
        cursor: pointer;
        overflow: hidden;
    }

    .time-bar:hover {
        opacity: 1.0;
    }

    .bar-text {
        color: black;
        font-size: 12px;
        opacity: 1.0;
        margin-top: 0px;
        margin-bottom: 0px;
    }

    .bar-selected {
        background-color: bisque;
        opacity: 1.0;
    }

</style>

@code {

    DateOnly? _dateTime => schedulingServive.SelectedDate;
    private TimeRowCollection _rows;
    private readonly DutyBarCollection _duties = new DutyBarCollection();

    protected override void OnInitialized()
    {
        _rows = new TimeRowCollection(AppendNewSchedule);

        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;
        schedulingServive.SelectedDateChanged += OnSelectedDateChanged;
        _duties.ItemSelected += DutiesOnItemSelected;

        ShowTimeBars(_dateTime.Value);
        StateHasChanged();
    }

    private void OnSelectedDateChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        ShowTimeBars(_dateTime.Value);
        StateHasChanged();
    }

    private void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;

        if (schedulingServive.SelectedDuty != null)
        {
            var selectedBar = _duties.Bars.FirstOrDefault(bar => bar.Duty.Id == schedulingServive.SelectedDuty.Id);
            if (selectedBar != null)
            {
                selectedBar.OnClick.Invoke(new MouseEventArgs());
            }
        }
        ShowTimeBars(_dateTime.Value);
        StateHasChanged();
    }

    private void OnPropertyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        ShowTimeBars(_dateTime.Value);
        StateHasChanged();
    }

    private void DutiesOnItemSelected(object? sender, DutySelectedEventArgs e)
    {
        schedulingServive.ChangeSelectedDuty(e.SelectedDuty, this);
    }


    private void ShowTimeBars(DateOnly date)
    {
        // 選択中のIDを覚えておく
        var selectedId = _duties.Bars.FirstOrDefault(d => d.IsSelected)?.Duty.Id;

        _duties.Clear();
        foreach (Duty duty in schedulingServive.FindDutiesByDate(date))
        {
            int top = _rows.TimeToPixel(duty.StartTime);
            int bottom = _rows.TimeToPixel(duty.EndTime);
            bool isSelected = false;
            if (!string.IsNullOrWhiteSpace(selectedId))
            {
                isSelected = ( duty.Id == selectedId);
            }
            string colorCode = schedulingServive.GetWorkCodeFamilyColorCode(duty.Id);
            _duties.Add(new DutyBar(duty, top, bottom - top, colorCode) { IsSelected = isSelected });
        }
    }

    private void AppendNewSchedule(TimeOnly selectedTimeBlock)
    {
        if (_dateTime == null) return;

        int defaultSpanMinute = 60;

        TimeOnly start = selectedTimeBlock;
        TimeOnly end = selectedTimeBlock.AddMinutes(defaultSpanMinute);
        DateOnly date = _dateTime.Value;
        
        // 指定した時刻を含む空き時間を検索する
        var ranges = schedulingServive.GetFreeTimeSpans(date).ToArray();
        WorkTimeRange? freeTimeRange = ranges.LastOrDefault(range => range.Contains(start) || range.Contains(end));
        if (freeTimeRange == null) return;

        if (!freeTimeRange.Contains(start))
        {
            start = freeTimeRange.StartTime;
            end = start.AddMinutes(defaultSpanMinute);
        }

        if (end > freeTimeRange.EndTime)
        {
            end = freeTimeRange.EndTime;
        }

        var createdDuty = schedulingServive.CreateNewDuty(date, start, end);
        ShowTimeBars(_dateTime.Value);
        StateHasChanged();
        schedulingServive.ChangeSelectedDuty(createdDuty, new object());
    }

    class TimeRowCollection
    {
        public TimeRow[] Rows { get; }
        public static int RowHeight = 60;
        int _pixelByMinute => RowHeight / 60;

        public TimeRowCollection(Action<TimeOnly> appendingFunc)
        {
            Rows = Enumerable.Range(0, 24)
                .Select(i => new TimeRow(new TimeOnly(i, 0), i * RowHeight, appendingFunc))
                .ToArray();
        }

        public int TimeToPixel(TimeOnly time)
        {
            var nearyTime = Rows.First(r => r.Time.Hour == time.Hour);
            int offset = time.Minute * _pixelByMinute;
            return nearyTime.RowTopPosition + offset;
        }
    }


    class TimeRow
    {
        public TimeOnly Time { get; }
        public int RowTopPosition { get; }
        Action<TimeOnly> _appendingFunc;

        public TimeRow(TimeOnly time, int rowTopPosition, Action<TimeOnly> appendingFunc)
        {
            Time = time;
            RowTopPosition = rowTopPosition;
            _appendingFunc = appendingFunc;
        }

        public Action<MouseEventArgs> OnClick => e =>
        {
            _appendingFunc.Invoke(this.Time);
        };
    }

    class DutyBarCollection
    {
        public List<DutyBar> Bars { get; }
        public event EventHandler<DutySelectedEventArgs> ItemSelected;

        public DutyBarCollection()
        {
            Bars = new List<DutyBar>();
        }

        public void Add(DutyBar bar)
        {
            Bars.Add(bar);
            bar.Selected -= BarOnSelected;
            bar.Selected += BarOnSelected;
        }

        public void Clear()
        {
            foreach (DutyBar bar in Bars)
            {
                bar.Selected -= BarOnSelected;
            }
            Bars.Clear();
        }

        private void BarOnSelected(object? sender, EventArgs e)
        {
            foreach (DutyBar bar in Bars)
            {
                if (bar != sender)
                {
                    bar.IsSelected = false;
                }
            }

            var dutyBar = sender as DutyBar;
            if (dutyBar != null)
            {
                ItemSelected?.Invoke(this, new DutySelectedEventArgs(dutyBar.Duty));
            }
        }
    }

    class DutySelectedEventArgs : EventArgs
    {
        public Duty SelectedDuty { get; }

        public DutySelectedEventArgs(Duty selectedDuty)
        {
            SelectedDuty = selectedDuty;
        }
    }

    class DutyBar
    {
        public Duty Duty { get; }
        public int Top { get; }
        public int Height { get; }
        public bool IsSelected { get; set; }
        private string _colorCode;

        public static int TimeWidth = 40;

        public event EventHandler Selected;

        public DutyBar(Duty duty, int top, int height, string colorCode)
        {
            Duty = duty;
            Top = top;
            Height = height;
            IsSelected = false;
            _colorCode = colorCode;
        }

        public string BarStyle => $"top:{Top}px; height:{Height}px; left:{TimeWidth + 5}px; background-color: {_colorCode};";

        public string AdditionalClass => IsSelected ? "bar-selected" : "";

        public Action<MouseEventArgs> OnClick => e =>
        {
            IsSelected = true;
            Selected?.Invoke(this, EventArgs.Empty);
        };
    }


}
