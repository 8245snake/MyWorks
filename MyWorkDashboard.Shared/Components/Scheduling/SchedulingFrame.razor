@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services
@using System.ComponentModel
@using MyWorkDashboard.Shared.Duties
@implements IDisposable

@inject SchedulingServive schedulingServive
@inject JsInteropService jsInteropService
@inject MessageService messageService

<div style="height: 100%; width: 100%;" @oncontextmenu:stopPropagation @oncontextmenu:preventDefault>

    <Row Style="height: 100%;">
        <div id="schedule-frame" class="schedule-area schedule-area-color">
            
            @foreach (TimeRow row in _rows.Rows)
            {
                <div class="time-row" style="@($"top:{row.RowTopPosition}px;")" @onclick="@row.OnClick">
                    <div class="time-row-item time-label">
                        @(row.Time.ToString())
                    </div>
                    <div class="time-row-item time-border time-border-color" >
                    </div>
                </div>
            }
            
            @foreach (DutyBar bar in _duties.Bars)
            {
                <SchedulingTaskBar BarModel="bar"></SchedulingTaskBar>
            }

        </div>
    </Row>

</div>

<style>
    .schedule-area {
        position: relative;
        width: 100%;
        overflow-y: scroll;
    }

    .time-row {
        height: @(TimeRowCollection.RowHeight)px;
        width: 100%;
        position: absolute;
        overflow: hidden;
    }

    .time-row-item {
        float: left;
    }

    .time-label {
        width: @(DutyBar.TimeWidth)px;
    }

    .time-border {
        width: calc(100% - @(DutyBar.TimeWidth)px);
        height: 100%;
    }

</style>

@code {

    DateOnly? _dateTime => schedulingServive.SelectedDate;
    private readonly TimeRowCollection _rows = new TimeRowCollection();
    private readonly DutyBarCollection _duties = new DutyBarCollection();

    protected override async void OnInitialized()
    {
        _rows.RowSelected += TimeRowOnSelected;

        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;
        schedulingServive.SelectedDateChanged += OnSelectedDateChanged;
        _duties.ItemSelected += DutiesOnItemSelected;

        try
        {
            await ShowTimeBarsAsync(_dateTime.Value);
            StateHasChanged();

            // スクロールする。DOMが生成されていないことがあったので少し遅延して実行する。
            Timer timer = new Timer(o =>
            {
                jsInteropService.ScrollScheduleFrame(400);
            }, null, 1, Timeout.Infinite);

        }
        catch (Exception e)
        {
            await messageService.Error(e.Message);
        }
    }


    private async void TimeRowOnSelected(object? sender, TimeRowSelectEventArgs e)
    {
        await AppendNewScheduleAsync(e.Time);
    }

    private async void OnSelectedDateChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;

        if (schedulingServive.SelectedDuty != null)
        {
            var selectedBar = _duties.Bars.FirstOrDefault(bar => bar.Duty.Id == schedulingServive.SelectedDuty.Id);
            if (selectedBar == null)
            {
                // 新規追加されている可能性があるので再チャレンジ
                await ShowTimeBarsAsync(_dateTime.Value);
                selectedBar = _duties.Bars.FirstOrDefault(bar => bar.Duty.Id == schedulingServive.SelectedDuty.Id);
            }

            if (selectedBar != null)
            {
                selectedBar.OnClick.Invoke(new MouseEventArgs());
            }
        }
        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void OnPropertyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void DutiesOnItemSelected(object? sender, DutySelectedEventArgs e)
    {
        await schedulingServive.ChangeSelectedDutyAsync(e.SelectedDuty, this);
    }


    private async Task ShowTimeBarsAsync(DateOnly date)
    {
        // 選択中のIDを覚えておく
        var selectedId = _duties.Bars.FirstOrDefault(d => d.IsSelected)?.Duty.Id;

        _duties.Clear();
        var duties = await schedulingServive.FindDutiesByDateAsync(date);
        foreach (Duty duty in duties)
        {
            int top = _rows.TimeToPixel(duty.StartTime);
            int bottom = _rows.TimeToPixel(duty.EndTime);
            bool isSelected = false;
            if (!string.IsNullOrWhiteSpace(selectedId))
            {
                isSelected = ( duty.Id == selectedId);
            }
            string colorCode = await schedulingServive.GetDutyColorCodeAsync(duty as BusinessDuty);
            _duties.Add(new DutyBar(duty, top, bottom - top, colorCode) { IsSelected = isSelected });
        }
    }

    /// <summary>
    /// 指定した時刻のブロックに新規タスクを追加する
    /// </summary>
    /// <param name="selectedTimeBlock">時刻ブロックの開始時刻</param>
    /// <returns></returns>
    private async Task AppendNewScheduleAsync(TimeOnly selectedTimeBlock)
    {
        if (_dateTime == null) return;

        int defaultSpanMinute = 60;

        TimeOnly start = selectedTimeBlock;
        TimeOnly end = selectedTimeBlock.AddMinutes(defaultSpanMinute);
        DateOnly date = _dateTime.Value;
        
        // 指定した時刻を含む空き時間を検索する
        var ranges = schedulingServive.GetFreeTimeSpans(date).ToArray();
        WorkTimeRange? freeTimeRange = ranges.LastOrDefault(range => range.Contains(start) || range.Contains(end));
        if (freeTimeRange == null) return;

        if (!freeTimeRange.Contains(start))
        {
            start = freeTimeRange.StartTime;
            end = start.AddMinutes(defaultSpanMinute);
        }

        if (end > freeTimeRange.EndTime)
        {
            end = freeTimeRange.EndTime;
        }

        Duty createdDuty = await schedulingServive.CreateNewDutyAsync(date, start, end);
        await ShowTimeBarsAsync(_dateTime.Value);

        StateHasChanged();
        await schedulingServive.ChangeSelectedDutyAsync(createdDuty, new object());
    }

    public void Dispose()
    {
        _rows.RowSelected -= TimeRowOnSelected;
        schedulingServive.SelectedDutyChanged -= OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged -= OnPropertyChanged;
        schedulingServive.SelectedDateChanged -= OnSelectedDateChanged;
        _duties.ItemSelected -= DutiesOnItemSelected;
        _duties.Clear();
    }

}
