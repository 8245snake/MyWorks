@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services
@using System.ComponentModel
@using MyWorkDashboard.Shared.Duties
@implements IDisposable

@inject SchedulingServive schedulingServive
@inject JsInteropService jsInteropService
@inject MessageService messageService
@inject ClipboardService clipboardService

<div style="height: 100%; width: 100%;" @oncontextmenu:stopPropagation @oncontextmenu:preventDefault>

    <Row Style="height: 100%;">
        <div id="schedule-frame" class="schedule-area schedule-area-color">

            @foreach (TimeRow row in _rows.Rows)
            {
                <TimeBlock Model="row" OnAddNew="OnAddNewTask" OnPaste="OnPaste"/>
            }

            @foreach (DutyBar bar in _duties.Bars)
            {
                <SchedulingTaskBar BarModel="bar"/>
            }

        </div>
    </Row>

</div>

<style>
    .schedule-area {
        position: relative;
        width: 100%;
        overflow-y: scroll;
    }

</style>

@code {

    DateOnly? _dateTime => schedulingServive.SelectedDate;
    private readonly TimeRowCollection _rows = new TimeRowCollection();
    private readonly DutyBarCollection _duties = new DutyBarCollection();

    protected override async void OnInitialized()
    {
        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;
        schedulingServive.SelectedDateChanged += OnSelectedDateChanged;
        _duties.ItemSelected += DutiesOnItemSelected;
        _duties.ItemDropped += DutiesOnItemDropped;

        try
        {
            await CreateTimeBarsAsync(_dateTime.Value);
            await InvokeAsync(StateHasChanged);

            // スクロールする。DOMが生成されていないことがあったので少し遅延して実行する。
            Timer timer = new Timer(async o =>
            {
                await jsInteropService.ScrollScheduleFrame(400);
                await InvokeAsync(StateHasChanged);
            }, null, 1, Timeout.Infinite);

        }
        catch (Exception e)
        {
            await messageService.Error(e.Message);
        }
    }

    private async void OnSelectedDateChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;
        await CreateTimeBarsAsync(_dateTime.Value);
        await InvokeAsync(StateHasChanged);
    }

    private async void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;

        if (schedulingServive.SelectedDuty != null)
        {
            var selectedBar = _duties.Bars.FirstOrDefault(bar => bar.Duty.Id == schedulingServive.SelectedDuty.Id);
            if (selectedBar == null)
            {
                // 新規追加されている可能性があるので再チャレンジ
                await CreateTimeBarsAsync(_dateTime.Value);
                selectedBar = _duties.Bars.FirstOrDefault(bar => bar.Duty.Id == schedulingServive.SelectedDuty.Id);
            }

            if (selectedBar != null)
            {
                selectedBar.OnClick(new MouseEventArgs());
            }
        }
        await CreateTimeBarsAsync(_dateTime.Value);
        await InvokeAsync(StateHasChanged);
    }

    private async void OnPropertyChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;
        await CreateTimeBarsAsync(_dateTime.Value);
        await InvokeAsync(StateHasChanged);
    }

    private async void DutiesOnItemSelected(object? sender, DutyBarEventArgs e)
    {
        await schedulingServive.ChangeSelectedDutyAsync(e.DutyBar.Duty, this);
        //await InvokeAsync(StateHasChanged);
        foreach (DutyBar bar in _duties.Bars)
        {
            bar.Redraw();
        }
    }

    private async void DutiesOnItemDropped(object? sender, DutyBarEventArgs e)
    {
        var newStartTime = _rows.PixelToTime((int)e.DutyBar.Top);
        Utility.Log(newStartTime);

        Duty duty = e.DutyBar.Duty;
        duty.Shift(newStartTime);
        await schedulingServive.ChangeSelectedDutyAsync(duty, this);
        await schedulingServive.RaiseDutyPropertyChangedAsync(null);
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// タイムラインのバーモデルを構築する
    /// </summary>
    /// <param name="date">日付</param>
    private async Task CreateTimeBarsAsync(DateOnly date)
    {
        try
        {
            // 選択中のIDを覚えておく
            var selectedId = _duties.Bars.FirstOrDefault(d => d.IsSelected)?.Duty.Id;

            _duties.Clear();
            var duties = await schedulingServive.FindDutiesByDateAsync(date);
            foreach (Duty duty in duties)
            {
                int top = _rows.TimeToPixel(duty.StartTime);
                int bottom = _rows.TimeToPixel(duty.EndTime);
                bool isSelected = false;
                if (!string.IsNullOrWhiteSpace(selectedId))
                {
                    isSelected = (duty.Id == selectedId);
                }
                string colorCode = await schedulingServive.GetDutyColorCodeAsync(duty as BusinessDuty);
                _duties.Add(new DutyBar(duty, top, bottom - top, colorCode, _rows) { IsSelected = isSelected });
            }

            // 多重度計算
            _duties.CalculateMultiplicity();
        }
        catch (Exception e)
        {
            await messageService.Error(e.Message);
        }
    }

    /// <summary>
    /// 指定した時刻のブロックに新規タスクを追加する
    /// </summary>
    /// <param name="selectedTimeBlock">時刻ブロックの開始時刻</param>
    /// <returns></returns>
    private async Task AppendNewScheduleAsync(TimeOnly selectedTimeBlock)
    {
        if (_dateTime == null) return;

        int defaultSpanMinute = 60;

        TimeOnly start = selectedTimeBlock;
        TimeOnly end = selectedTimeBlock.AddMinutes(defaultSpanMinute);
        DateOnly date = _dateTime.Value;
        WorkTimeRange range = GetFreeRange(date, start, end);

        Duty createdDuty = await schedulingServive.CreateNewDutyAsync(date, range);
        await CreateTimeBarsAsync(_dateTime.Value);

        await InvokeAsync(StateHasChanged);
        await schedulingServive.ChangeSelectedDutyAsync(createdDuty, this);
        await schedulingServive.RaiseDutyPropertyChangedAsync(null);
    }

    private async Task DuplicateScheduleAsync(TimeOnly selectedTimeBlock)
    {
        if (_dateTime == null) return;
        if (clipboardService.Duty == null) return;

        TimeOnly start = selectedTimeBlock;
        TimeOnly end = selectedTimeBlock.AddMinutes(clipboardService.Duty.TotalMinutes);
        DateOnly date = _dateTime.Value;
        WorkTimeRange range = GetFreeRange(date, start, end);

        Duty createdDuty = await schedulingServive.DuplicateDutyAsync(clipboardService.Duty, date, range);
        await CreateTimeBarsAsync(_dateTime.Value);

        await InvokeAsync(StateHasChanged);
        await schedulingServive.ChangeSelectedDutyAsync(createdDuty, this);
        await schedulingServive.RaiseDutyPropertyChangedAsync(null);
    }

    /// <summary>
    /// 指定した日の期間において空いている期間を返す
    /// </summary>
    /// <param name="date">日付</param>
    /// <param name="start">検索開始時刻</param>
    /// <param name="end">検索終了時刻</param>
    /// <returns>空き時間の範囲</returns>
    private WorkTimeRange GetFreeRange(DateOnly date, TimeOnly start, TimeOnly end)
    {
        var spanMinutes = (end - start).TotalMinutes; 

        // 指定した時刻を含む空き時間を検索する
        var ranges = schedulingServive.GetFreeTimeSpans(date).ToArray();
        WorkTimeRange? freeTimeRange = ranges.LastOrDefault(range => range.Contains(start) || range.Contains(end));

        if (freeTimeRange == null) return null;

        if (!freeTimeRange.Contains(start))
        {
            start = freeTimeRange.StartTime;
            end = start.AddMinutes(spanMinutes);
        }

        if (end > freeTimeRange.EndTime)
        {
            end = freeTimeRange.EndTime;
        }

        var range = new WorkTimeRange(start, end);
        return range;
    }

    private async Task OnAddNewTask(TimeRow timeRow)
    {
        await AppendNewScheduleAsync(timeRow.Time);
    }

    private async void OnPaste(TimeRow timeRow)
    {
        await DuplicateScheduleAsync(timeRow.Time);
    }

    public void Dispose()
    {
        schedulingServive.SelectedDutyChanged -= OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged -= OnPropertyChanged;
        schedulingServive.SelectedDateChanged -= OnSelectedDateChanged;
        _duties.ItemSelected -= DutiesOnItemSelected;
        _duties.ItemSelected -= DutiesOnItemDropped;
        _duties.Clear();
    }

}
