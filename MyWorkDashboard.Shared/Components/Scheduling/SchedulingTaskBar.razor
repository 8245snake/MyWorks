@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.Design.Serialization
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using System.Runtime.InteropServices.ComTypes
@using System.Security.Cryptography
@using MyWorkDashboard.Shared.Services
@namespace MyWorkDashboard.Shared
@implements IDisposable

@inject ClipboardService clipboardService
@inject MessageService messageService

<Dropdown  Trigger="new Trigger[] { Trigger.ContextMenu }" @ref="_dropDown" >
    <Overlay>
        <Menu SelectedKeys="new string[]{}">
            <MenuItem Icon="@IconType.Outline.Copy" OnClick="Copy">コピー</MenuItem>
        </Menu>
    </Overlay>
    <ChildContent>
        <DraggablePanel @bind-Y="@BarModel.Top" Style="@BarModel.BarStyle" Class="@($"time-bar time-bar-color {BarModel.AdditionalClass}")" 
                        FixX GrabbingDelay="500" OnMouseDown="@BarModel.OnClick" Drop="@BarModel.OnDrop" Moved="Moved" >
            <div>
                <p class="bar-text">@(BarModel.Duty.StartTime)～@(BarModel.Duty.EndTime) @BarModel.Duty.Title</p>
            </div>
        </DraggablePanel>
    </ChildContent>
</Dropdown>


<style>
    .time-bar {
        position: absolute;
        overflow: hidden;
    }

    .bar-text {
        color: black;
        font-size: 12px;
        opacity: 1.0;
        margin-top: 0px;
        margin-bottom: 0px;
    }
</style>

@code {

    [Parameter, Required]
    public DutyBar BarModel { get; set; }

    
    private Dropdown _dropDown;

    protected override void OnParametersSet()
    {
        BarModel.RedrawInvoked -= OnRedrawInvoked;
        BarModel.RedrawInvoked += OnRedrawInvoked;
    }


    private async void OnRedrawInvoked(object? sender, EventArgs e)
    {
        Utility.Log($"{BarModel.Duty.Title} {BarModel.IsSelected} {BarModel.AdditionalClass}");
        await InvokeAsync(StateHasChanged);
    }


    public void Dispose()
    {
        BarModel.RedrawInvoked -= OnRedrawInvoked;
    }

    private void Moved()
    {
        if (BarModel.TimeRows != null)
        {
            var start = BarModel.TimeRows.PixelToTime((int)BarModel.Top);
            BarModel.Duty.Shift(start);
        }
    }

    private async void Copy()
    {
        _dropDown.SetVisible(false);
        clipboardService.Copy(BarModel.Duty);
        await messageService.Info("タスクをコピーしました");
    }

}


