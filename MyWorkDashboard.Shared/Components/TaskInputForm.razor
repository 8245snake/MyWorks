@using MyWorkDashboard.Shared.Services
@using System.ComponentModel

@inject MessageService messageService
@inject SchedulingServive schedulingServive

<div class="task-frame" hidden="@_isEmpty">
    

    
    <Row Class="input-item-row" Align="middle">
        <Col>
            <TimeRangeInput StepMinutes="10" StartTime="@StartTime" EndTime="@EndTime" OnTimeChange="OnSelectedTimeChange" />
        </Col>
        <Col Offset="1">
            休憩時間
            <Switch @bind-Checked="_isBreakTime" Disabled="true"/>@*まだ使えない*@
        </Col>
        <Col Offset="1">
            <Popconfirm Placement="@Placement.Top" Title="削除してよろしいですか" OkText="削除する" CancelText="キャンセル" OnConfirm="OnDeleteButtonClick">
                <Button Danger Type="@ButtonType.Primary" Shape="@ButtonShape.Round">
                    削除
                </Button>
            </Popconfirm>
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            <AntDesign.Input Placeholder="タイトル" @bind-Value="Title" />
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            <AntDesign.TextArea Placeholder="内容" Rows="10" @bind-Value="Description" />
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            @if (schedulingServive.SelectedDuty is BusinessDuty)
            {
                <Select DataSource="@_codes"
                        @bind-Value="@SelectedWorkCodeFamily"
                        LabelName="@nameof(WorkCodeVM.Label)"
                        ValueName="@nameof(WorkCodeVM.Value)"
                        Placeholder="作業コードを選択してください"
                        DefaultActiveFirstItem="false"
                        EnableSearch>
                </Select>
            }
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            @if (SelectedWorkCodeFamily != null)
            {
                <p>@($"{SelectedWorkCodeFamily.Description}")</p>
            }
        </Col>
    </Row>

</div>

<div hidden="@(!_isEmpty)">
    <Result Icon="exclamation-circle-outline"
            Status="info"
            Title="タスクが選択されていません"
            SubTitle="左側のタイムラインでタスクを選択すると編集が可能になります。">
    </Result>
</div>

<style>
    .task-frame {
        border: 1px black solid;
        height: 100%;
        padding: 10px;
    }

    .input-item-row {
        margin-top: 10px;
    }

</style>

@code
{

    private bool _isEmpty => schedulingServive.SelectedDuty == null;
    private bool _isBreakTime;

    string? Title
    {
        get => schedulingServive.SelectedDuty?.Title;
        set
        {
            if (schedulingServive.SelectedDuty != null)
            {
                schedulingServive.SelectedDuty.Title = value;
                schedulingServive.RaiseDutyPropertyChanged(this);
            }
        }
    }

    string? Description 
    {
        get => schedulingServive.SelectedDuty?.Description;
        set
        {
            if (schedulingServive.SelectedDuty != null)
            {
                schedulingServive.SelectedDuty.Description = value;
                StateHasChanged();
                schedulingServive.RaiseDutyPropertyChanged(this);
            }
        }
    }

    
    TimeOnly? StartTime
    {
        get => schedulingServive.SelectedDuty?.StartTime;
    }

        
    TimeOnly? EndTime
    {
        get => schedulingServive.SelectedDuty?.EndTime;
    }
    
    private void OnSelectedTimeChange(TimeRangeChangeEventArgs e)
    {
        if (schedulingServive.SelectedDuty != null)
        {
            if (schedulingServive.SelectedDuty.StartTime != e.StartTime || schedulingServive.SelectedDuty.EndTime != e.EndTime)
            {
                schedulingServive.SelectedDuty.StartTime = e.StartTime;
                schedulingServive.SelectedDuty.EndTime = e.EndTime;
                StateHasChanged();
                schedulingServive.RaiseDutyPropertyChanged(this);
            }
        }
    }

    private WorkCodeFamily? SelectedWorkCodeFamily
    {
        get
        {
            if (schedulingServive.SelectedDuty is BusinessDuty businessDuty)
            {
                return _codes.FirstOrDefault(c => c.Value.Id == businessDuty.WorkCodeFamilyId)?.Value;
            }
            return null;
        }
        set
        {
            if (schedulingServive.SelectedDuty is BusinessDuty businessDuty)
            {
                if (businessDuty.WorkCodeFamilyId != value.Id)
                {
                    businessDuty.WorkCodeFamilyId = value.Id;
                    StateHasChanged();
                    schedulingServive.RaiseDutyPropertyChanged(this);
                }
            }
        }
    }


    class WorkCodeVM
    {
        public string Label { get; set; }
        public WorkCodeFamily Value { get; set; }
    }

    List<WorkCodeVM> _codes;

    protected override void OnInitialized()
    {
        _codes = new List<WorkCodeVM>();
        foreach (WorkCodeFamily family in schedulingServive.GetAllWorkCodeFamily())
        {
            _codes.Add(new WorkCodeVM { Value = family, Label = family.ToString() });
        }

        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;

    }


    private void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        this.Title = schedulingServive.SelectedDuty?.Title;
        this.Description = schedulingServive.SelectedDuty?.Description;
        StateHasChanged();
    }

    private void OnPropertyChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;
        StateHasChanged();
    }

    private void OnDeleteButtonClick()
    {
        schedulingServive.DeleteDuty(schedulingServive.SelectedDuty.Id);
        schedulingServive.ChangeSelectedDuty(null, this);
        messageService.Info("削除されました");
    }
}
