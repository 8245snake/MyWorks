@using System.Timers

@implements IAsyncDisposable

<div class="@_design" style=@($"top: {Y}px; left: {X}px;") @onmousedown="OnMouseDown" @onmouseup="OnMouseUp">
    @ChildContent
</div>

@if (_isGrabbing)
{
    <div class="drag-target" @onmouseup="OnMouseUp" @onmousemove="OnMouseMove">
    </div>
}

<style>
    .draggable-panel {
        cursor: grab;
        position: absolute;
    }

    .panel-grabbing {
        cursor: grabbing;
        box-shadow: 1px 1px 12px rgba(0,0,0,.65);
        
        z-index: 999;
    }

    .drag-target {
        position: fixed;
        left: 0px;
        top: 0px;
        height: 100vh;
        width: 100vw;
        z-index: 1000;
        cursor: grabbing;
    }

</style>


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<object> Moved { get; set; }

    [Parameter]
    public double X { get; set; }

    [Parameter]
    public double Y { get; set; }

    [Parameter]
    public bool FixX { get; set; }

    [Parameter]
    public bool FixY { get; set; }

    [Parameter]
    public int GrabbingDelay { get; set; }

    Timer _timer;

    bool _isGrabbing = false;
    string _design
    {
        get
        {
            string design = "draggable-panel";
            if (_isGrabbing)
            {
                design += " panel-grabbing";
            }
            return design;
        }
    }

    protected override void OnInitialized()
    {
        if (GrabbingDelay > 0)
        {
            _timer = new Timer(GrabbingDelay) { AutoReset = false };
        }
    }

    private double lastX;
    private double lastY;

    private void OnMouseDown(MouseEventArgs e)
    {
        if (GrabbingDelay > 0)
        {
            _timer.Elapsed -= TimerOnElapsed;
            _timer.Elapsed += TimerOnElapsed;
            _timer.Start();
        }
        else
        {
            _isGrabbing = true;
        }

        lastX = e.ScreenX;
        lastY = e.ScreenY;
    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        _timer.Elapsed -= TimerOnElapsed;
        _timer.Stop();
        _isGrabbing = true;
        StateHasChanged();

    }

    private void OnMouseUp()
    {
        _isGrabbing = false;
        if (GrabbingDelay > 0)
        {
            _timer.Stop();
            _timer.Elapsed -= TimerOnElapsed;
        }
    }


    private void OnMouseMove(MouseEventArgs e)
    {
        if (!_isGrabbing) return;

        if (!FixY)
        {
            Y += e.ScreenY - lastY;
            lastY = e.ScreenY;
        }

        if (!FixX)
        {
            X += e.ScreenX - lastX;
            lastX = e.ScreenX;
        }

    }

    public ValueTask DisposeAsync()
    {
        _timer.Stop();
        _timer.Elapsed -= TimerOnElapsed;
        _timer.Dispose();
        return ValueTask.CompletedTask;
    }

}
