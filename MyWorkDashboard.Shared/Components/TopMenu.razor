@using MyWorkDashboard.Shared.Services

@inject SchedulingServive schedulingServive


<Menu Theme="MenuTheme.Dark" Mode="MenuMode.Horizontal">
    <Row Justify="space-between">
        <Col>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Left" Shape="@ButtonShape.Circle" OnClick="GoYesterday"></Button>
            <DatePicker @ref="_datePicker" AllowClear="false" Size="@DatePickerSize.Large" TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="_dateTime" OnChange="OnDateChanged"/>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Right" Shape="@ButtonShape.Circle" OnClick="GoTommorrow"></Button>

            <Tooltip Placement="@Placement.Bottom" Title=@("新規タスク追加")>
                <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Form" Shape="@ButtonShape.Round" OnClick="AddNewSchedule" Style="margin-left: 10px"></Button>
            </Tooltip>
        </Col>

        <Col>
            @*ここにメニューボタンとかを出す*@
        </Col>
    </Row>
</Menu>

@code {
    private DateTime? _dateTime;
    private DatePicker<DateTime?> _datePicker;

    protected override void OnInitialized()
    {
        _dateTime = DateTime.Now;
        var today = DateOnly.FromDateTime(DateTime.Now);
        schedulingServive.ChangeSelectedDate(today, this);
    }

    private void GoYesterday()
    {
        ChangeDate(_dateTime.Value.AddDays(-1));
    }

    private void GoTommorrow()
    {
        ChangeDate(_dateTime.Value.AddDays(1));
    }

    private void AddNewSchedule()
    {
        var duty = schedulingServive.AddNewSchedule(DateOnly.FromDateTime(_dateTime.Value));
        schedulingServive.ChangeSelectedDuty(duty, this);
        schedulingServive.RaiseDutyPropertyChanged(duty);
        schedulingServive.ChangeSelectedDuty(duty, this);
    }


    private void OnDateChanged(DateTimeChangedEventArgs e)
    {
        ChangeDate(e.Date);
    }

    private void ChangeDate(DateTime datetime)
    {
        schedulingServive.ChangeSelectedDuty(null, this);
        _dateTime = datetime;
        schedulingServive.ChangeSelectedDate(DateOnly.FromDateTime(datetime), this);
        StateHasChanged();
    }
}
