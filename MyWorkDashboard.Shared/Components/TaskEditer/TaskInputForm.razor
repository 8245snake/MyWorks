@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services
@using System.ComponentModel
@using MyWorkDashboard.Shared.Duties
@using MyWorkDashboard.Shared.WorkCodeFamilies

@implements IDisposable

@inject MessageService messageService
@inject SchedulingServive schedulingServive
@inject ControlService controlService

<div class="task-frame" hidden="@_isEmpty">

    <Row Class="input-item-row" Align="middle">
        <Col>
        <Tooltip Placement="@Placement.Bottom" Title=@("前の予定まで")>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.StepBackward" Class="control-buttons" OnClick="OnBackButtonClick"></Button>
        </Tooltip>
        </Col>
        <Col>
        <TimeRangeInput StepMinutes="10" StartTime="@StartTime" EndTime="@EndTime" OnTimeChange="OnSelectedTimeChange" />
        </Col>
        <Col>
        <Tooltip Placement="@Placement.Bottom" Title=@("次の予定まで")>
            <Button Type="@ButtonType.Default" Icon="@IconType.Outline.StepForward" Class="control-buttons" OnClick="OnForwordButtonClick"></Button>
        </Tooltip>
        </Col>
        @*        <Col Offset="1">
            休憩時間
            <Switch @bind-Checked="_isBreakTime" Disabled="true"/>
            </Col>*@

        <Col Offset="1">
            <Tooltip Placement="@Placement.Bottom" Title=@("ToDoリストに送る")>
                <Button Type="@ButtonType.Default" Shape="@ButtonShape.Round" Class="control-buttons" Icon="@IconType.Outline.VerticalAlignBottom" OnClick="SendToDoList"></Button>
            </Tooltip>
        </Col>
        <Col>
            <Popconfirm Placement="@Placement.Bottom" Title="削除してよろしいですか" OkText="削除する" CancelText="キャンセル" OnConfirm="OnDeleteButtonClick" @ref="_deleteConfirm">
                <Tooltip Placement="@Placement.Bottom" Title=@("タスク削除")>
                <Button Danger Type="@ButtonType.Primary" Shape="@ButtonShape.Round" Class="control-buttons" Icon="@IconType.Outline.Delete"></Button>
                </Tooltip>
            </Popconfirm>
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            <AntDesign.Input Placeholder="タイトル" @bind-Value="Title" OnFocus="() => { controlService.EnableImeMode();}"/>
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            <AntDesign.TextArea Placeholder="内容" Rows="10" @bind-Value="Description"  OnFocus="() => { controlService.EnableImeMode();}"/>
        </Col>
    </Row>

    <Row Class="input-item-row">
        <Col Span="24">
            @if (schedulingServive.SelectedDuty is BusinessDuty)
            {
                <WorkCodeSelector 
                    DataSource="@_codes"
                    @bind-Value="@SelectedWorkCodeFamily"/>
                }
        </Col>
    </Row>

</div>

<div hidden="@(!_isEmpty)">
    <Result Icon="exclamation-circle-outline"
            Status="info"
            Title="タスクが選択されていません"
            SubTitle="左側のタイムラインでタスクを選択すると編集が可能になります。">
    </Result>
    <Skeleton/>
</div>

<style>

    .control-buttons {
        margin: 2px 10px;
    }

    .task-frame {
        height: 100%;
        padding: 10px;
    }

    .input-item-row {
        margin-top: 10px;
    }
</style>

@code
{

    private bool _isEmpty => schedulingServive.SelectedDuty == null;
    private Popconfirm _deleteConfirm;

    /// <summary>
    /// タイトル
    /// </summary>
    string? Title
    {
        get => schedulingServive.SelectedDuty?.Title;
        set
        {
            if (schedulingServive.SelectedDuty != null)
            {
                schedulingServive.SelectedDuty.Title = value + "";
                InvokeRaiseDutyPropertyChangedAsync();
            }
        }
    }

    /// <summary>
    /// 説明
    /// </summary>
    string? Description
    {
        get => schedulingServive.SelectedDuty?.Description;
        set
        {
            if (schedulingServive.SelectedDuty != null)
            {
                schedulingServive.SelectedDuty.Description = value + "";
                StateHasChanged();
                InvokeRaiseDutyPropertyChangedAsync();
            }
        }
    }

    /// <summary>
    /// 作業コード
    /// </summary>
    private WorkCodeFamily? SelectedWorkCodeFamily
    {
        get
        {
            if (schedulingServive.SelectedDuty is BusinessDuty businessDuty)
            {
                return _codes.FirstOrDefault(c => c.Id == businessDuty.WorkCodeFamilyId);
            }
            return null;
        }
        set
        {
            if (schedulingServive.SelectedDuty is BusinessDuty businessDuty)
            {
                if (businessDuty.WorkCodeFamilyId != value.Id)
                {
                    businessDuty.WorkCodeFamilyId = value.Id;
                    StateHasChanged();
                    InvokeRaiseDutyPropertyChangedAsync();
                }
            }
        }
    }

    /// <summary>
    /// データソース
    /// </summary>
    List<WorkCodeFamily> _codes;

    /// <summary>
    /// プロパティが変化したことを通知する
    /// </summary>
    private async void InvokeRaiseDutyPropertyChangedAsync()
    {
        await  schedulingServive.RaiseDutyPropertyChangedAsync(this);
    }

    TimeOnly? StartTime => schedulingServive.SelectedDuty?.StartTime;

    TimeOnly? EndTime => schedulingServive.SelectedDuty?.EndTime;

    protected override async void OnInitialized()
    {
        _codes = new List<WorkCodeFamily>();
        _codes.AddRange(await schedulingServive.GetAllWorkCodeFamily());
        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;

    }

    private async void OnSelectedTimeChange(TimeRangeChangeEventArgs e)
    {
        if (schedulingServive?.SelectedDuty != null)
        {
            if (schedulingServive.SelectedDuty.StartTime != e.StartTime || schedulingServive.SelectedDuty.EndTime != e.EndTime)
            {
                schedulingServive.SelectedDuty.StartTime = e.StartTime;
                schedulingServive.SelectedDuty.EndTime = e.EndTime;
                StateHasChanged();
                await schedulingServive.RaiseDutyPropertyChangedAsync(this);
            }
        }
    }


    private void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;
        StateHasChanged();
    }

    private void OnPropertyChanged(object? sender, EventArgs e)
    {
        if (sender == this) return;
        StateHasChanged();
    }

    private async Task OnDeleteButtonClick()
    {
        try
        {
            await _deleteConfirm.Close();
            await schedulingServive.DeleteDutyAsync(schedulingServive.SelectedDuty.Id);
            await schedulingServive.ChangeSelectedDutyAsync(null, this);
            await messageService.Info("削除されました", 1);
        }
        catch
        {
        }
    }

    private async Task OnBackButtonClick()
    {
        if (schedulingServive.SelectedDate == null) return;
        if (schedulingServive.SelectedDuty == null) return;

        TimeOnly start = schedulingServive.SelectedDuty.StartTime;

        // todo 重なっている場合
        var found = (await schedulingServive.FindDutiesByDateAsync(schedulingServive.SelectedDate.Value))
            .Where(d => d.EndTime < start)
            .MinBy(d => (start - d.EndTime).TotalMinutes);

        if (found == null) return;

        schedulingServive.SelectedDuty.StartTime = found.EndTime;
        await schedulingServive.RaiseDutyPropertyChangedAsync(this);
    }

    private async Task OnForwordButtonClick()
    {
        if (schedulingServive.SelectedDate == null) return;
        if (schedulingServive.SelectedDuty == null) return;

        TimeOnly end = schedulingServive.SelectedDuty.EndTime;

        // todo 重なっている場合
        var found = (await schedulingServive.FindDutiesByDateAsync(schedulingServive.SelectedDate.Value))
            .Where(d => d.StartTime > end)
            .MinBy(d => (d.StartTime - end).TotalMinutes);

        if (found == null) return;

        schedulingServive.SelectedDuty.EndTime = found.StartTime;
        await schedulingServive.RaiseDutyPropertyChangedAsync(this);
    }

    private async Task SendToDoList()
    {
        if (schedulingServive.SelectedDate == null) return;
        if (schedulingServive.SelectedDuty == null) return;

        var duty = schedulingServive.SelectedDuty;
        var todo = await schedulingServive.CreateNewToDoItem(duty);
        await schedulingServive.UpdateToDoItem(todo, this);

        await schedulingServive.DeleteDutyAsync(duty.Id);
        await schedulingServive.ChangeSelectedDutyAsync(null, this);
    }

    public void Dispose()
    {
        schedulingServive.SelectedDutyChanged -= OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged -= OnPropertyChanged;
    }
}
