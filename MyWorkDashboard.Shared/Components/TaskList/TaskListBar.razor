@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Duties
@using System.ComponentModel.DataAnnotations
@using System.Dynamic
@using MyWorkDashboard.Shared.Services

@inject SchedulingServive schedulingServive

<div class="task-list-bar task-list-bar-color @SelectedStyle" @onclick="e => { OnSelected.InvokeAsync(e);}">
    <div class="task-color-label" style=@($"background-color: {ColorCode};")></div>
    <div class="task-color-content">
        <div class="bar-top">
            <p style="max-width: 40%; white-space: nowrap;" class="bar-titile">@(Duty.StartTime)～@(Duty.EndTime) (@(_timeSpanText))</p>
            <p style="font-size: 10px; max-width: 60%; white-space: nowrap; overflow: hidden;">@_workCodetext</p>
        </div>
        
        <p class="bar-titile">@Duty.Title</p>
        <p class="bar-description">@Duty.Description</p>
    </div>
    
</div>


<style>

    .task-list-bar {
        height: 70px;
        width: 100%;
        cursor: pointer;
    }

    .task-color-label {
        width: 20px;
        height: 100%;
        float: left;
    }

    .task-color-content {
        height: 100%;
        width: 100%;
        padding: 3px;
    }

    .bar-titile {
        margin: 0px 0px 0px 0px;
    }
    
    .bar-description {
        height: 15px;
        margin: 0px 0px 0px 0px;
        color: #c0c0c0;
        font-size: 10px;
        overflow: hidden;
    }

    .bar-top {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-right: 5px;
    }

</style>


@code {

    [Parameter, Required]
    public Duty Duty { get; set; }

    [Parameter, Required]
    public string ColorCode { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSelected { get; set; }

    private string _workCodetext
    {
        get
        {
            var duty = Duty as BusinessDuty;
            var family = schedulingServive.GetAllWorkCodeFamily().Result.FirstOrDefault(d => d.Id == duty.WorkCodeFamilyId);
            if (family == null) return $"!IDが見つかりませんでした! ID={duty.WorkCodeFamilyId}";
            return family.Description;
        }
    }

    private string _timeSpanText
    {
        get
        {
            TimeSpan span = (Duty.EndTime - Duty.StartTime);
            return span.TotalMinutes < 60 ? $"{span.TotalMinutes}min" : $"{span.Hours}h{span.Minutes}min";
        }
    }

    private string SelectedStyle => this.Selected ? "list-selected-color" : "";


}
