@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services
@using System.ComponentModel
@using MyWorkDashboard.Shared.Duties

@implements IDisposable

@inject SchedulingServive schedulingServive

<Row Style="height: 100%; width: 100%;">
    
    @if (_duties.Bars.Count > 0)
    {
        
        <div style="overflow-y: scroll; height: 100%; width: 100%;">

            @foreach (var bar in _duties.Bars.OrderBy(b => b.Duty.StartTime))
            {
                <TaskListBar Duty="bar.Duty" ColorCode="@bar.ColorCode" OnSelected="@bar.OnClick" Selected="@bar.IsSelected"/>
            }
        </div>
    }
    else
    {
        <div>
            <Empty Description="@("タスクがありません")"/>
        </div>
    }

</Row>



@code {

    DateOnly? _dateTime => schedulingServive.SelectedDate;
    private readonly DutyBarCollection _duties = new DutyBarCollection();

    protected override async void OnInitialized()
    {

        schedulingServive.SelectedDutyChanged += OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged += OnPropertyChanged;
        schedulingServive.SelectedDateChanged += OnSelectedDateChanged;
        _duties.ItemSelected += DutiesOnItemSelected;

        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }


    private async void OnSelectedDateChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void OnSelectedDutyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;

        if (schedulingServive.SelectedDuty != null)
        {
            foreach (var bar in _duties.Bars)
            {
                bar.IsSelected = false;
                if (schedulingServive.SelectedDuty.Id == bar.Duty.Id)
                {
                    bar.IsSelected = true;
                }
            }
        }

        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void OnPropertyChanged(object? sender, EventArgs e)
    {
        if(sender == this) return;
        await ShowTimeBarsAsync(_dateTime.Value);
        StateHasChanged();
    }

    private async void DutiesOnItemSelected(object? sender, DutySelectedEventArgs e)
    {
        await schedulingServive.ChangeSelectedDutyAsync(e.SelectedDuty, this);
        foreach (var bar in _duties.Bars)
        {
            bar.IsSelected = false;
            if (e.SelectedDuty == bar.Duty)
            {
                bar.IsSelected = true;
            }
        }
        StateHasChanged();
    }


    private async Task ShowTimeBarsAsync(DateOnly date)
    {
        // 選択中のIDを覚えておく
        var selectedId = schedulingServive.SelectedDuty?.Id;

        _duties.Clear();
        var duties = await schedulingServive.FindDutiesByDateAsync(date);
        foreach (Duty duty in duties)
        {
            bool isSelected = false;
            if (!string.IsNullOrWhiteSpace(selectedId))
            {
                isSelected = ( duty.Id == selectedId);
            }
            string colorCode = await schedulingServive.GetDutyColorCodeAsync(duty as BusinessDuty);
            _duties.Add(new DutyBar(duty, 60, colorCode) { IsSelected = isSelected });
        }
    }

    public void Dispose()
    {
        schedulingServive.SelectedDutyChanged -= OnSelectedDutyChanged;
        schedulingServive.DutyPropertyChanged -= OnPropertyChanged;
        schedulingServive.SelectedDateChanged -= OnSelectedDateChanged;
        _duties.ItemSelected -= DutiesOnItemSelected;    }

}
