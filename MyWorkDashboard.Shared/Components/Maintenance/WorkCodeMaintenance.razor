@namespace MyWorkDashboard.Shared

@using MyWorkDashboard.Shared.Services
@using MyWorkDashboard.Shared.WorkCodeFamilies
@using Microsoft.AspNetCore.Components

@inject SchedulingServive schedulingServive

<Row>
    <Col Span="22" Style="overflow-y: scroll; height: calc(100vh - 112px);">
        <SortableContainer Items="_workCodes" SelectedStyleClass="list-selected-color" @ref="_container">
            <ItemTemplate>
                <div style="padding: 5px; border: 1px black solid;">
                    <Row>
                        <Col>
                            <div style=@($"background-color: {context.ColorCode}; height: 50px; width: 50px;")></div>
                        </Col>
                        <Col Span="3">
                            色
                            <Input @bind-Value="@context.ColorCode"/>
                        </Col>
                        <Col Span="4">
                            コード
                            <Input @bind-Value="@context.CategoryCode"/>
                        </Col>
                        <Col Span="7">
                            カテゴリ
                            <Input @bind-Value="@context.CategoryName"/>
                        </Col>
                        <Col Span="2">
                            作業コード
                            <Input @bind-Value="@context.WorkCode"/>
                        </Col>
                        <Col Span="7">
                            作業名
                            <Input @bind-Value="@context.WorkName"/>
                        </Col>
                    </Row>
                </div>
            </ItemTemplate>
        </SortableContainer>
    </Col>
    <Col Span="2">
        <div>
            <Button OnClick="CreateNew" Shape="@ButtonShape.Round" Icon="@IconType.Outline.Plus" Block>新規</Button>
            <Button OnClick="GoUp" Shape="@ButtonShape.Round" Icon="@IconType.Outline.Up" Block>上へ</Button>
            <Button OnClick="GoDown" Shape="@ButtonShape.Round" Icon="@IconType.Outline.Down" Block>下へ</Button>
            <Button OnClick="GoTop" Shape="@ButtonShape.Round" Icon="@IconType.Outline.VerticalAlignTop" Block>先頭</Button>
            <Button OnClick="GoBottom" Shape="@ButtonShape.Round" Icon="@IconType.Outline.VerticalAlignBottom" Block>末尾</Button>
            <Button Type="@ButtonType.Primary" OnClick="Save" Shape="@ButtonShape.Round" Icon="@IconType.Outline.Save" Block Disabled="@(!_propertyChanged)">保存</Button>
        </div>
    </Col>
</Row>



@code {

    private SortableContainer<WorkCodeItemVM> _container;
    
    private WorkCodeItemVM[] _workCodes = { };

    private bool _propertyChanged = false;

    public bool PropertyChanged => _propertyChanged;


    protected override async void OnInitialized()
    {
        _workCodes = (await schedulingServive.GetAllWorkCodeFamily()).Select((f, index) => new WorkCodeItemVM(f, schedulingServive)).ToArray();
        foreach (WorkCodeItemVM item in _workCodes)
        {
            item.PropertyChanged += ItemOnPropertyChanged;
        }
        StateHasChanged();
    }

    private void ItemOnPropertyChanged(object? sender, EventArgs e)
    {
        foreach (WorkCodeItemVM item in _workCodes)
        {
            item.PropertyChanged -= ItemOnPropertyChanged;
        }
        _propertyChanged = true;
        StateHasChanged();
    }

    private void GoUp()
    {
        _container.Up();
        _propertyChanged = true;
    }

    private void GoDown()
    {
        _container.Down();
        _propertyChanged = true;
    }

    private void GoTop()
    {
        _container.GoTop();
        _propertyChanged = true;
    }

    private void GoBottom()
    {
        _container.GoBottom();
        _propertyChanged = true;
    }

    private async Task CreateNew()
    {
        string id = await schedulingServive.GetNewWorkCodeIdAsync();
        WorkCodeFamily code = new WorkCodeFamily(id, new WorkCategory("", ""), new WorkCode("", ""));

        var list = _workCodes.ToList();
        var model = new WorkCodeItemVM(code, schedulingServive);
        list.Add(model);
        _workCodes = list.ToArray();
        _container.Rebuild(_workCodes);
        _container.SelectItem(model);

        _propertyChanged = true;
    }

    private async Task Save()
    {
        var arr = _container.SortedItems;
        await schedulingServive.SaveAll(arr.Select(item => item.Create()));

        foreach (WorkCodeItemVM itemVm in arr.Where(item => item.IsColorChanged))
        {
            await schedulingServive.RegisterColorAsync(itemVm.Id, itemVm.ColorCode);
        }

        _propertyChanged = false;

        foreach (WorkCodeItemVM item in _workCodes)
        {
            item.PropertyChanged -= ItemOnPropertyChanged;
            item.PropertyChanged += ItemOnPropertyChanged;
        }
    }
}
